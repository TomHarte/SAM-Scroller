ORG BUFFER_CODE
draw_tiles:
	; Store return address.
	ld (@+return+1), de

	; Code below is unrolled per sliver and per column, so there are
	; column_count * slivers repetitions — 51 in total if the full
	; screen is in use as there are currently three slivers per column.
@column_loop: EQU FOR column_count

	; On-screen start address for column.
column_address{@column_loop}:
	ld hl, 128*192 + 32768

	; The first and last columns use different tile output routines
	; because tiles have been clipped in advance. This is achieved
	; by paging the proper 16kb block into the right place.
	;
	; So there are three occasions on which paging is needed:
	;	(i) the first column;
	;	(ii) the last column; and
	;	(iii) the second column, being the first one with full-size tiles.

IF (@column_loop - 2) & 0xff >= column_count - 3	; I can't find any way to do conjunctions in PyZ80; this should be
tile_page{@column_loop}:							; equivalent to "if(column_loop < 2 || column_loop == column_count - 1)".
	ld a, tiles_full_page
	out (LMPR), a
ENDIF

	; Per sliver, just grab the dirty flags and use them directly to form a JP destination.
@sliver_loop: EQU FOR 3
		@diff_address: EQU DIRTY_FLAGS + FLAGS_SIZE - 1 - @sliver_loop - @column_loop*3

		ld a, (@diff_address)		; Get dirty flags.
		ld (@+jp_sliver+1), a		; Use flags directly to select lower byte of jump target.

		ld de, @+next
	@jp_sliver:

	; In addition to the comment above about paging being used to select a tile set,
	; there are usually two sets of tiles in each 16kb page — a 'right' set (which are
	; those which have been clipped on the left, leaving only the right portion) and
	; a 'left' set. Which is in use depends on the column being drawn.
	;
	; ... with the caveat that unclipped tiles sit on a 16kb page of their own. Their
	; jump table is where the right one would usually be, arbitrarily.
IF @column_loop > 0
		jp right_slivers
ELSE
		jp left_slivers
ENDIF
	@next:

NEXT @sliver_loop
NEXT @column_loop
columns_end:

	; Zero out the dirty flags.
	;
	; I think it is cheaper to do this en masse than as the sliver loop walks
	; as I don't need constantly to reset A or to write in byte quantities.
	;
	; TODO: eliminate assumption about column count here.
	ld bc, 0x0000
	ld sp, DIRTY_FLAGS + FLAGS_SIZE
@zero_loop: EQU FOR 25
	push bc
NEXT @zero_loop
	xor a
	ld (DIRTY_FLAGS + FLAGS_SIZE - 51), a

	; Switch back to main page and return to the caller.
	ld a, EXECPAGE + %00100000
	out (LMPR), a
@return:
	jp 1234

INC "../generated/slivers.z80s"

map:
INC "../generated/map.z80s"
