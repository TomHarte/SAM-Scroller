scroll_offset:	db 0	; Offset within the current column, in pixels. So always a multiple of two in the range 0â€“15.
scroll_column:	dw 0	; The column currently visible in the leftmost part of the screen (or about to be if moving left).

map_address:	dw map + 12*(column_count)
diff_address:	dw diffs + 3*(column_count - 1)

@total_x: 		dw 0	; A 16-bit counter of total scroll offset; essentially combines scroll_offset and scroll_column.
						; Possibly vestigial; I need to figure out whether this still actually helps much.


SCROLLED_NONE:	EQU 0
SCROLLED_LEFT:	EQU 1
SCROLLED_RIGHT:	EQU 2
scroll_change:	db SCROLLED_NONE		; A field indicating what scroll, if any, most-recently occurred. Will hold one
										; of the enumerations defined above.

;
; Scrolls the display one position to the left, if any space remains
; for scrolling in that direction.
;
; Intended for CALLing.
;
; Calls did_scroll_left1 if a scroll occurs; also calls did_scroll_left8
; if a new column of tiles was revealed.
;
; At exit: C is clear if a scroll occurred; set otherwise.
;
scroll_left:
	;
	; Check that total offset is greater than 0; if so then subtract 1
	; and continue. Otherwise return early.
	;
	ld hl, (@-total_x)
	ld a, h
	or l
	scf
	ret z

	dec hl
	ld (@-total_x), hl

	; Notify that a scroll left happened.
	ld a, SCROLLED_LEFT
	ld (scroll_change), a
	call did_scroll_left1

	;
	; Subtract two from scroll offset.
	;
	ld a, (scroll_offset)
	ld d, a
	dec a
	dec a
	and 15
	ld (scroll_offset), a

	;
	; Update map pointer if the scroll offset just decremented to 0.
	;
	ret nz

	ld hl, (map_address)
	ld bc, -12
	add hl, bc
	ld (map_address), hl

	ld hl, (diff_address)
	ld bc, -3
	add hl, bc
	ld (diff_address), hl

	ld hl, (scroll_column)
	dec hl
	ld (scroll_column), hl

	; That will have revealed a new column.
	call did_scroll_left8

	or a
	ret

;
; Scrolls the display one position to the right, if any space remains
; for scrolling in that direction.
;
; Intended for CALLing.
;
; Calls did_scroll_right1 if a scroll occurs; also calls did_scroll_right8
; if a new column of tiles was revealed.
;
; At exit: C is clear if a scroll occurred; set otherwise.
;
scroll_right:
	;
	; Check that total offset is less than the map size; if so then add 1
	; and continue. Otherwise return early.
	;
	ld hl, (@-total_x)
	ld bc, (((diffs - map) / 12) - column_count) * 8
	or a
	sbc hl, bc
	scf
	ret z

	add hl, bc
	inc hl
	ld (@-total_x), hl

	; Notify that a scroll right happened.
	ld a, SCROLLED_RIGHT
	ld (scroll_change), a
	call did_scroll_right1

	;
	; Add two to scroll offset.
	;
	ld a, (scroll_offset)
	ld d, a
	inc a
	inc a
	and 15
	ld (scroll_offset), a

	;
	; Do not update map pointer if the scroll offset didn't just increment from 0.
	;
	; Logic here is that offset 1 is the map at offset 0 but moved one position to
	; the left. Therefore the step up from 0 is the point at which the far extent
	; of the map changes.
	;
	ld a, d
	or a
	ret nz

	; Add 12 to map address to move one column along.
	; Correspondingly add 3 to the diff address.
	ld hl, (map_address)
	ld bc, 12
	add hl, bc
	ld (map_address), hl

	ld hl, (diff_address)
	ld bc, 3
	add hl, bc
	ld (diff_address), hl

	ld hl, (scroll_column)
	inc hl
	ld (scroll_column), hl

	; That will have revealed a new column.
	call did_scroll_right8

	or a
	ret

;
; Performs a full redraw of all video buffers.
;
; Follows the tile output conventions, so should be used as a JP target
; with DE as the link register.
;
reset_scrolling:
	ld (@+return+1), de

	; Seed all buffers.
	ld a, 16
	ld (scroll_offset), a
@seed_tiles:
	ld a, (scroll_offset)
	or a
	jp z, @+end_seed
	dec a
	dec a
	ld (scroll_offset), a
	out (HMPR), a

	ld a, 0x3c
	ld hl, DIRTY_FLAGS
	ld b, FLAGS_SIZE
@flags_loop:
	ld (hl), a
	inc l
	dec b
	jp nz, @-flags_loop

	ld ix, (map_address)
	ld de, @-seed_tiles
	jp draw_tiles

@end_seed:
;	xor a
	ld a, 2
	ld (scroll_offset), a

@return:
	jp 1234
