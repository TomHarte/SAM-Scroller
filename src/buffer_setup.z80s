;
; This is purely one-time startup stuff; relocate it into one of the initial
; video buffers so that it naturally doesn't have an ongoing footprint.
;

DUMP SETUPPAGE, 0
ORG 0

; The following should be one more than the number of whole
; columns that should appear on the display.
column_count: EQU 17

; Setup all screens.
setup_per_screen_code:
	ld (@+return+1), de

	; Establish palette.
	ld bc, 0x10f8
	ld hl, palette+15
	otdr

	; Proceed per-page...
	ld a, 0
@copy_buffer_code:
	out (HMPR), a

	; Copy tile-drawing code into place.
	ld hl, BUFFER_CODE_ORIGINAL
	ld de, BUFFER_CODE
	ld bc, BUFFER_CODE_DONE-BUFFER_CODE
	ldir

	; The first address will already be correct (for now);
	; set up to store across the screen setting as per
	; this screen's offset.
	ld hl, 128*192 + 32768		; Start of rightmost column.
	ld bc, -8

	; Next will be at [screen end] - (a >> 1) {- 8 for page 0}.
	or a
	jr z, @+store

	ld d, 0
	ld e, a
	srl e
	sbc hl, de
	sbc hl, bc	; To undo the add that is built into the loop below.
@store:

	;
	; Proceed from the second column address, decreasing by 8 across the
	; rest of the set.
	;
@address_loop: EQU FOR column_count - 1
	add hl, bc
	ld (column_address{@address_loop+1} + 1), hl
NEXT @address_loop

	; Continue to next page.
	add 2
	cp 16
	jr nz, @-copy_buffer_code

	;
	; Apply per-page adjustments to locate proper tile pages.
	;

	; First page: do one fewer columns by rewring the final to
	; be a JR that skips its body.
	ld a, 0
	out (HMPR), a

	ld a, 0x18												; i.e. JR
	ld (column_address{column_count-1}), a
	ld a, columns_end - column_address{column_count-1} - 2	; i.e. offset to return code.
	ld (column_address{column_count-1} + 1), a

	; Second page onwards: use appropriate left and right
	; tables for first and last column; if this is an
	; odd page (i.e. one in which the clipped tiles are
	; an odd number of bytes wide), also decrease the initial
	; and final column start address by 1 as per the different
	; call semantics for tiles that are an odd number of
	; bytes wide.
@page_loop: EQU FOR 7
	ld a, 2 + (@page_loop << 1)
	out (HMPR), a

	ld a, tiles_left_{@page_loop+1}_page
	ld (tile_page0+1), a
	ld a, tiles_left_{@page_loop+1} >> 8
	ld (tile_address0_0+1), a
	ld (tile_address0_1+1), a
	ld (tile_address0_2+1), a

	ld a, tiles_right_{7-@page_loop}_page
	ld (tile_page{column_count-1}+1), a
	ld a, tiles_right_{7-@page_loop} >> 8
	ld (tile_address{column_count-1}_0+1), a
	ld (tile_address{column_count-1}_1+1), a
	ld (tile_address{column_count-1}_2+1), a

IF (@page_loop & 1) == 0
	ld hl, (column_address0+1)
	dec hl
	ld (column_address0+1), hl

	ld hl, (column_address{column_count-1}+1)
	dec l
	ld (column_address{column_count-1}+1), hl
ENDIF
NEXT @page_loop

	ld a, EXECPAGE
	out (HMPR), a
@return:
	jp 1234


INC "generated/palette.z80s"

;
; The section from here to BUFFER_CODE_DONE is copied into place on
; each video page individually, fixed up slightly for the appropriate
; tile functions.
;
BUFFER_CODE_ORIGINAL:
include "per_buffer_code.z80s"
BUFFER_CODE_DONE:
;
; End relocated section.
;
