;
; Constants affecting motion.
;
INITIAL_JUMP_STRENGTH:		EQU 300							; Force applied on the first frame of jumping.
PER_FRAME_JUMP_DECREMENT:	EQU INITIAL_JUMP_STRENGTH/20	; Amount by which force applied decreases each frame while the button is pressed.
@player_jump_strength:		dw 0							; Records current jump strength.
@allow_new_jump:			dw 0							; Indicates whether a new jump request should be honoured; 0 = true.


GRAVITY_STRENGTH:	EQU 80		; The quantum force applied due to gravity.
VERTICAL_DAMPING:	EQU 4		; Resistance to vertical motion, in log2 terms. If this is 1 then vertical speed will be reduced by (speed >> 1)
								; at each tick. If it is 2 then vertical speed will be reduced by (speed >> 2). Etc. So bigger values mean
								; less damping.


HORIZONTAL_AIR_DAMPING:		EQU 4	; Horizontal damping when player is in the air.
HORIZONTAL_GROUND_DAMPING:	EQU 2	; Horizontal damping when player is on the ground.
	; REQUIRED: HORIZONTAL_GROUND_DAMPING <= HORIZONTAL_AIR_DAMPING.

; The force applied by horizontal motion, whether in the air or on the ground.
; With fixed speed scrolling in increments of 1 coordinate unit, these are picked
; so that the character will have a maximum speed of 1 unit movement.
HORIZONTAL_AIR_STRENGTH:	EQU 256 >> HORIZONTAL_AIR_DAMPING
HORIZONTAL_GROUND_STRENGTH:	EQU 256 >> HORIZONTAL_GROUND_DAMPING

;
; Adopted coordinate system:
;
;	1 horizontal unit = 2 pixels.
;
;	This both means you can read it as a byte location and
;	it'll give enemies enough range to be able to move off both sides of the screen.
;	Since positions are in fixed point, it also doesn't obstruct true pixel-level placement
;	if I decide to support that.
;
;	Though I've still yet to hammer myself in on an origin. It probably should be that
;	[64, 192] is the visible area.
;
;
;	1 vertical unit = 1 pixels.
;
;	Since the screen is only 192 pixels high there are 64 off-screen pixels without
;	any further adjustment being necessary.
;
;	Right now I'm using position 248 as the bottom of the screen on the basis that
;	jumping over the top of the frame is standard platformer behaviour but dipping
;	below the bottom isn't so common. So that gives 8 rows below and 56 above.
;
player_current:		dw 64 << 8, START_Y << 8
player_previous:	dw 64 << 8, START_Y << 8
X_OFFSET:	EQU 0
Y_OFFSET:	EQU 2

player_flags:		db 0	; Indicates current player status – which direction they're facing and whether they're on solid ground.

FLAG_DIRECTION:		EQU 1
FLAG_ON_GROUND:		EQU 2
FLAG_STATIONARY:	EQU 4

SCREEN_TOP:			EQU START_Y	; TODO: if and when player sprite can safely go off top of screen, change this to Y_CEILING.

;
; Applies all game logic — both input and 'physics' that affect current player position.
;
; The number of individually CALLed steps is somewhat artificial, correlating mostly to
; my inexperience in this stuff and a desire to build from smaller blocks. Better code
; distribution may follow.
;
update_game_logic:
	; Horizontal and vertical steps are performed disjointly in order to avoid having to
	; answer the question: what's correct if the player has moved into a block diagonally?
	call apply_inherent_forces_vertical
	call apply_input_vertical
	call reset_on_ground_flag
	call test_map_collisions_vertical
	call test_vertical_bounds

	call apply_inherent_forces_horizontal
	call apply_input_horizontal
	call test_map_collisions_horizontal
	jp test_horizontal_bounds


;
; Tests for input affecting vertical motion and applies it if found.
; This includes the stuff behind console-style variable jump height.
;
apply_input_vertical:
	;
	; Check whether player is requesting a jump.
	;
	ld bc, 0x7ffe
	in a, (c)
	rra
	jp c, @+no_jump

	; If player is off the ground, continue as long as thrust remains.
	ld a, (player_flags)
	and FLAG_ON_GROUND
	jp z, @+begin_jump

	; Otherwise, start a new jump if permitted.
	ld a, (@allow_new_jump)
	or a
	ret nz
	inc a
	ld (@allow_new_jump), a

	ld hl, -INITIAL_JUMP_STRENGTH
	jp @+apply_jump

@begin_jump:
	ld hl, (@player_jump_strength)
	ld a, h
	or l
	ret z

@apply_jump:
	ex de, hl
	ld hl, (player_current+Y_OFFSET)
	add hl, de
	ld (player_current+Y_OFFSET), hl

	ld hl, PER_FRAME_JUMP_DECREMENT
	add hl, de
	ld (@player_jump_strength), hl
	ret

@no_jump:
	; Jump button is no longer pressed, so zero out remaining jump strength and
	; permit future new jumps.
	ld hl, 0
	ld (@player_jump_strength), hl
	xor a
	ld (@allow_new_jump), a
	ret


;
; Tests for input affecting horizontal motion and applies it if found.
; Applied force depends on whether player is on the ground or in the air.
;
apply_input_horizontal:
	;
	; Check also for left/right input
	;
	; Check for horizontal motion.
	ld hl, (player_current+X_OFFSET)
	ld bc, 0xfffe
	in a, (c)

	rra
	rra
	rra
	rra
	jp c, @+no_left

	ld a, (player_flags)
	and FLAG_ON_GROUND
	jp z, @+apply_air_constant_left

@apply_ground_constant_left:
	ld bc, -HORIZONTAL_GROUND_STRENGTH
	add hl, bc

	jp @+no_right

@apply_air_constant_left:
	ld bc, -HORIZONTAL_AIR_STRENGTH
	add hl, bc

	jp @+no_right

@no_left:
	rra
	jp c, @+no_right

	ld a, (player_flags)
	and FLAG_ON_GROUND
	jp z, @+apply_air_constant_right

@apply_ground_constant_right:
	ld bc, HORIZONTAL_GROUND_STRENGTH
	add hl, bc

	jp @+no_right

@apply_air_constant_right:
	ld bc, HORIZONTAL_AIR_STRENGTH
	add hl, bc

@no_right:
	ld (player_current+X_OFFSET), hl
	ret


;
; Clears the on-ground flag.
;
reset_on_ground_flag:
	ld a, (player_flags)
	and ~FLAG_ON_GROUND
	ld (player_flags), a
	ret


;
; Constrains the player to the screen's bounds vertically, possibly
; setting the on-ground flag.
;
test_vertical_bounds:
	; Test for bottom of screen
	ld a, (player_current+Y_OFFSET+1)
	cp START_Y + 192 - 24
	jp nc, @+collide_with_bottom

	; Test for top of screen
	cp SCREEN_TOP
	jp c, @+collide_with_top
	ret

@collide_with_bottom:
	; Player is at bottom of screen, so is on the ground.
	; Set bottom of screen as location and set the ON_GROUND flag.
	ld hl, (START_Y + 192 - 24) << 8
	ld (player_current+Y_OFFSET), hl

	ld a, (player_flags)
	or FLAG_ON_GROUND
	ld (player_flags), a
	ret

@collide_with_top:
	; Player is at top of screen. Just set maximum position.
	ld hl, SCREEN_TOP << 8
	ld (player_current+Y_OFFSET), hl
	ret


;
; Applies gravity and air friction to the player vertically.
;
apply_inherent_forces_vertical:
	; Grab current and previous positions, overwriting the old value of
	; previous with the old value of current.
	ld hl, (player_current+Y_OFFSET)
	ld bc, (player_previous+Y_OFFSET)
	ld (player_previous+Y_OFFSET), hl

	; Let DE = implied velocity.
	or a
	sbc hl, bc
	ld d, h
	ld e, l

	; Apply dampening forces (air resistance, I guess).
@vertical_damp: EQU FOR VERTICAL_DAMPING
	sra d
	rr e
NEXT @vertical_damp
	or a
	sbc hl, de

	ex de, hl
	ld hl, (player_current+Y_OFFSET)
	add hl, de

	; Apply gravity.
	ld bc, GRAVITY_STRENGTH
	add hl, bc
	ld (player_current+Y_OFFSET), hl
	ret


;
; Applies ground and air friction to the player horizontally and updates
; the stationary flag. 
;
apply_inherent_forces_horizontal:
	; As before, load current and previous positions, and overwrite
	; old previous with old current.
	ld hl, (player_current+X_OFFSET)
	ld bc, (player_previous+X_OFFSET)
	ld (player_previous+X_OFFSET), hl

	; Let DE = implied velocity.
	or a
	sbc hl, bc
	ld d, h
	ld e, l

	; Apply dampening forces.
	;
	; Unlike vertically there are two possible forces at play:
	; there's air resistance but also ground friction. Which is
	; dealt with fairly trivially as applying one degree of
	; damping if the player is in the air and an optionally
	; different one if the player is on the ground.
@ground_damping: EQU FOR HORIZONTAL_GROUND_DAMPING
	sra d
	rr e
NEXT @ground_damping

IF HORIZONTAL_AIR_DAMPING != HORIZONTAL_GROUND_DAMPING
	ld a, (player_flags)
	and FLAG_ON_GROUND
	jp nz, @+no_air_damping

@air_damping: EQU FOR HORIZONTAL_AIR_DAMPING - HORIZONTAL_GROUND_DAMPING
	sra d
	rr e
NEXT @air_damping

@no_air_damping:
ENDIF

	; Up to here: HL is previous velocity, DE is amount to remove
	; due to dampening.

	; If DE is zero then velocity must be very small but underflow
	; is going to prevent it ever reaching 0. If so make it
	; effectively zero by not applying any velocity whatsoever.
	ld a, d
	or e
	ld a, (player_flags)
	jp nz, @+in_motion

	or FLAG_STATIONARY
	ld (player_flags), a
	ret

@in_motion:
	and ~FLAG_STATIONARY
	ld (player_flags), a

	; Apply dampening factor to velocity and apply velocity to position.
	sbc hl, de
	ex de, hl
	ld hl, (player_current+X_OFFSET)
	add hl, de
	ld (player_current+X_OFFSET), hl
	ret


;
; Tests the current horizontal position of the player to constrain him to the area of
; the screen; also triggers scrolling if implied by the player's current position.
;
test_horizontal_bounds:
	; Test edge-of-screen bounds first, as these apply in absolute terms.
	ld a, (player_current+X_OFFSET+1)
	cp 128 - 8 + 1
	jp c, @+no_constrain_right

	cp 128 + 64 - 8				; In which case the proper bounds are on the left.
	jp nc, @+constrain_left

	ld a, 128 - 8
	ld (player_current+X_OFFSET+1), a
	ld a, 0xff
	ld (player_current+X_OFFSET), a
	jp @+edges_done

@no_constrain_right:
	or a
	jp p, @+edges_done

@constrain_left:
	xor a
	ld (player_current+X_OFFSET+1), a
	ld (player_current+X_OFFSET), a

@edges_done:
	; Check bounds and force a scroll if necessary.
	ld a, (player_current+X_OFFSET+1)
	cp 64 + 16 - 8
	jp c, @+no_scroll_right

	call scroll_right
	jp c, @+no_scroll_right

	ld a, (player_current+X_OFFSET+1)
	dec a
	ld (player_current+X_OFFSET+1), a

	ld a, (player_previous+X_OFFSET+1)
	dec a
	ld (player_previous+X_OFFSET+1), a

@no_scroll_right:
	ld a, (player_current+X_OFFSET+1)
	cp 64 - 16
	ret nc

	call scroll_left
	ret c

	ld a, (player_current+X_OFFSET+1)
	inc a
	ld (player_current+X_OFFSET+1), a

	ld a, (player_previous+X_OFFSET+1)
	inc a
	ld (player_previous+X_OFFSET+1), a

	ret


;
; Tests and corrects for any collisions with the map as a result of current vertical motion.
;
test_map_collisions_vertical:
	call @+get_map_address

	; Test direction of vertical velocity; if none then no need to test
	; for overlaps. If upward, test top row. Otherwise test bottom row.
	ld hl, (player_current+Y_OFFSET)
	ld bc, (player_previous+Y_OFFSET)
	or a
	sbc hl, bc
	ret z

	ld h, d
	ld l, e

	jp m, @+test_above
	
	; Vertical velocity is downward. Test for overlap at feet.
	; Task one: determine which map square contain the feet.
	ld a, (player_current+Y_OFFSET+1)
	and 0xf
	cp 8
	jp c, @+no_middle
	inc hl
@no_middle:
	inc hl

	call @+test_horizontal_flank
	ret c

	; Set on-ground flag.
	ld a, (player_flags)
	or FLAG_ON_GROUND
	ld (player_flags), a

	; Push player up above platform below.
	ld a, (player_current+Y_OFFSET+1)
	add 8
	and ~0xf
	sub 8
	ld (player_current+Y_OFFSET+1), a

	xor a
	ld (player_current+Y_OFFSET), a
	ret

@test_above:
	; Vertical velocity is upnward. Test for overlap at head.
	call @+test_horizontal_flank
	ret c

	; Push player down below platform above.
	ld a, (player_current+Y_OFFSET+1)
	and ~0xf
	add 0x10
	ld (player_current+Y_OFFSET+1), a
	xor a
	ld (player_current+Y_OFFSET), a
	ret


;
; Tests and corrects for any collisions with the map as a result of current horizontal motion.
;
test_map_collisions_horizontal:
	call @+get_map_address

	; Test direction of horizontal velocity; if noen then no need to
	; test for overlaps. Ditto if player is exactly aligned with a
	; column, no need to test for horizontal overlaps. Otherwise
	; either test to the left or to the right depending on
	; sign of velocity.
	ld a, (player_current+X_OFFSET+1)
	add a
	ld b, a
	ld a, (scroll_offset)
	add b
	and 0xf
	ret z

	ld hl, (player_current+X_OFFSET)
	ld bc, (player_previous+X_OFFSET)
	or a
	sbc hl, bc
	ret z

	ld h, d
	ld l, e

	jp m, @+test_left

	; Horizontal velocity is rightward. Test for overlap to right.
	ld bc, 12
	add hl, bc

	call @+test_vertical_flank
	ret c

	ld a, (scroll_offset)
	ld b, a

	ld a, (player_current+X_OFFSET+1)
	add a

	add b
	and ~0xf
	sub b

	rrca
	ld (player_current+X_OFFSET+1), a
	ld a, 0xff
	ld (player_current+X_OFFSET), a
	ret

@test_left:
	; Horizontal velocity is leftward. Test for overlap to left.
	call @+test_vertical_flank
	ret c

	ld a, (scroll_offset)
	ld b, a
	ld a, (player_current+X_OFFSET+1)
	add a

	add b
	and ~0xf
	add 16
	sub b

	rrca
	ld (player_current+X_OFFSET+1), a
	xor a
	ld (player_current+X_OFFSET), a
	ret


;
; Returns carry clear if anything in the one or two horizontal map
; positions (depending on how many the player currently straddles)
; starting from (HL) is solid. Carry set otherwise.
;
@test_horizontal_flank:
	; Vertical velocity is upnward. Test for overlap at head.
	call @+is_solid
	ret nc

	; If there's no second column to check, don't check it.
	ld a, (player_current+X_OFFSET+1)
	add a
	ld b, a
	ld a, (scroll_offset)
	add b
	and 0xf
	jp z, @+no_solid

	; Check seccond column.
	ld bc, 12
	add hl, bc
	jp @+is_solid

@no_solid:
	scf
	ret


;
; Returns carry clear if anything in the two or three vertical
; map positions (depending on how many the player currently straddles)
; starting from (HL) is solid. Carry set otherwise.
;
@test_vertical_flank:
	call @+is_solid
	ret nc

	inc hl
	call @+is_solid
	ret nc

	ld a, (player_current+Y_OFFSET+1)
	and 0xf
	cp 9
	ret c

	inc hl
;	jp @+is_solid		; RESTORE if method order changes, obviously.


;
; Returns carry clear if the tile at (HL)
; is solid, set otherwise.
;
@is_solid:
	ld a, (hl)

	; Simplified test: a > 17 || a == 2
	cp 17 << 2
	ret nc

	cp 2 << 2
	jp z, @+ret_c

	scf
	ret

@ret_c:
	xor a
	ret	


;
; Gets the address into the tile map of the tile currently
; overlapping the player's top left, returning it redundantly
; in both HL and DE.
;
@get_map_address:
	; Get x position relative to map.
	ld a, (player_current+X_OFFSET+1)
	ld b, a
	ld a, (scroll_offset)
	or a
	jp nz, @+not_zero
	add 16
@not_zero:
	rra
	add b

	; Mask off the bottom bits so that position is
	; tile location multiplied by 8; improve that to
	; multiplied by 12 to index into the tile map.
	and ~7
	ld b, a
	rrca
	add b

	; Turn that into a column address.
	ld hl, (map_address)
	ld bc, -17*12	; i.e. locate entry for the cell in the top left of display.
	add hl, bc
	ld b, 0
	ld c, a
	add hl, bc

	; Shift down Y in search of first hit row.
	ld a, (player_current+Y_OFFSET+1)
	sub START_Y
	and 0xf0
	rrca
	rrca
	rrca
	rrca
	ld c, a
	add hl, bc		; HL should now point to the tile overlapping the top left of the player.

	; Store a backup of HL.
	ld d, h
	ld e, l

	ret
