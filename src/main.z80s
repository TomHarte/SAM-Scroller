LINE:		EQU 249
STATUS:		EQU 249

LMPR:		EQU 250
HMPR:		EQU 251
VMPR:		EQU 252
BORDER:		EQU 254

EXECPAGE:	EQU 24
SETUPPAGE:	EQU 14


;
; Constants affecting animation.
;
WALK_FRAME_DURATION:		EQU 10

;
; Constants defining the coordinate system.
;
START_X:	EQU 64		; Offset of the left of the display in internal coordinates. Making this a multiple of 16 simplifies map collision detection.
START_Y:	EQU 48		; Offset of the top of the display in internal coordinates. Making this a multiple of 16 simplifies map collision detection.
Y_CEILING:	EQU 8		; Position at which player will bump his head in internal coordinate; needs to be more than 0 to avoid tunnelling.

	ORG 0
	DUMP EXECPAGE, 0
	AUTOEXEC

	; This program does not use interrupts.
	di

	; Disable display until setup is complete.
	ld a, %10000000
	out (BORDER), a

	; Establish line interrupts at line 191, which will be polled for later.
	ld a, 191
	out (LINE), a

	;
	; The SAM being what it is, execution will actually begin with this code in
	; the upper page.
	;
	; But that's convenient for taking advantage of the setup code â€” put that
	; initially into the lower page and give it a modified return address.
	;
	ld a, %00100000 + SETUPPAGE
	out (LMPR), a
	ld de, @+fix_page + 0x8000
	jp setup_per_screen_code

@fix_page:
	; Page self to lower page and proceed with execution from there.
	ld a, %00100000 + EXECPAGE
	out (LMPR), a

	; Do a full redraw at the current scroll position.
	ld de, @+enter_loop
	jp reset_scrolling
@enter_loop:

	; Reenable the display.
	ld a, %00000000
	out (BORDER), a

;
; Initial setup tasks are done now.
;
; With no title screen, etc, yet implemented, just jump straight to the in-game loop.
;
	jp game_loop



@clippable_x: db START_X + 64

update_game_logic:
	call update_player_logic

	ld a, (scroll_change)
	rra
	jp nc, @+no_left

	ld a, (@-clippable_x)
	inc a
	ld (@-clippable_x), a
	jp @+no_scroll

@no_left:
	rra
	jp nc, @+no_scroll

	ld a, (@-clippable_x)
	dec a
	ld (@-clippable_x), a

@no_scroll:
	ret


draw_objects:
	; TEST! Draw a clippable that moves left-to-right and then overflows back to the left.
	ld d, 112
	ld a, (@-clippable_x)
	ld h, clippable_1 >> 8
	call draw_clippable

	ld a, (@-clippable_x)
	ld b, a
	ld c, 112 + START_Y
	call clip_mark16x24

	jp draw_player_sprite

; Code to include on the main program page.
INC "game_loop.z80s"
INC "generated/sprites.z80s"
INC "mark_dirty.z80s"
INC "player/display.z80s"
INC "player/logic.z80s"
INC "scrolling.z80s"

; Code that goes elsewhere.
INC "video_buffers/buffer_setup.z80s"
INC "generated/tiles.z80s"
