@player_walk_count:	db 0	; Counts number of frames the player has been walking on the ground for, affecting current frame.

;
; Draws the player sprite and flags appropriate dirty spots.
;
draw_player_sprite:
	; Load y, subtract origin, multiply it by 128 and set the top bit.
	ld l, 0
	ld a, (player_current+Y_OFFSET+1)
	sub START_Y
	scf
	rra
	rr l
	ld h, a

	; Add x.
	ld a, (player_current+X_OFFSET+1)
	add l
	ld l, a

	; Call preformed sprite plotter.
	ld a, (player_flags)
	and FLAG_ON_GROUND
	jp z, @+draw_jump

	ld a, (player_flags)
	and FLAG_STATIONARY
	jp nz, @+draw_stationary

	ld a, (@player_walk_count)
	inc a
	cp 4*WALK_FRAME_DURATION
	jp nz, @+pick_sprite

	ld a, 0
@pick_sprite:
	ld (@player_walk_count), a

	; HACK: just hard code this for now.
	cp WALK_FRAME_DURATION
	jp nc, @+compare_next
	call sprite_0
	jp @+mark_dirty

@compare_next:
	cp 2*WALK_FRAME_DURATION
	jp nc, @+compare_next
	call sprite_1
	jp @+mark_dirty

@compare_next:
	cp 3*WALK_FRAME_DURATION
	jp nc, @+compare_next
	call sprite_2
	jp @+mark_dirty

@compare_next:
	call sprite_1
	jp @+mark_dirty

@draw_stationary:
	call sprite_3
	jp @+mark_dirty_reset

@draw_jump:
	call sprite_4

@mark_dirty_reset:
	; Zero out walk count, to resume at 0 upon next hitting the ground.
	xor a
	ld (@player_walk_count), a

@mark_dirty:
	;
	; Mark proper dirty bits.
	;
	ld a, (player_current+X_OFFSET+1)
	ld b, a
	ld a, (player_current+Y_OFFSET+1)
	ld c, a
	jp mark16x24
