@player_walk_count:	db 0	; Counts number of frames the player has been walking on the ground for, affecting current frame.

; @clippable_x: db 250

;
; Draws the player sprite and flags appropriate dirty spots.
;
draw_player_sprite:
	; TEST! Draw a clippable that moves left-to-right and then overflows back to the left.
	; ld d, 12
	; ld a, (@-clippable_x)
	; inc a
	; ld (@-clippable_x), a
	; ld h, clippable_0 >> 8
	; call draw_clippable

	; Load y, subtract origin, multiply it by 128 and set the top bit.
	ld l, 0
	ld a, (player_current+Y_OFFSET+1)
	sub START_Y
	scf
	rra
	rr l
	ld h, a

	; Add x.
	ld a, (player_current+X_OFFSET+1)
	add l
	ld l, a

	; Call preformed sprite plotter.
	ld a, (player_flags)
	and FLAG_ON_GROUND
	jp z, @+draw_jump

	ld a, (player_flags)
	and FLAG_STATIONARY
	jp nz, @+draw_stationary

	ld a, (@player_walk_count)
	inc a
	cp 4*WALK_FRAME_DURATION
	jp nz, @+pick_sprite

	ld a, 0
@pick_sprite:
	ld (@player_walk_count), a

	; HACK: just hard code this for now.
	cp WALK_FRAME_DURATION
	jp nc, @+compare_next
	call sprite_0
	jp @+mark_dirty

@compare_next:
	cp 2*WALK_FRAME_DURATION
	jp nc, @+compare_next
	call sprite_1
	jp @+mark_dirty

@compare_next:
	cp 3*WALK_FRAME_DURATION
	jp nc, @+compare_next
	call sprite_2
	jp @+mark_dirty

@compare_next:
	call sprite_1
	jp @+mark_dirty

@draw_stationary:
	call sprite_3
	jp @+mark_dirty_reset

@draw_jump:
	call sprite_4

@mark_dirty_reset:
	; Zero out walk count, to resume at 0 upon next hitting the ground.
	xor a
	ld (@player_walk_count), a

@mark_dirty:
	;
	; Mark proper dirty bits.
	;
	ld a, (player_current+X_OFFSET+1)
	ld b, a
	ld a, (player_current+Y_OFFSET+1)
	ld c, a
	jp mark16x24


;
; Draws the clippable indicated by H in the location defined by D = y, A = x.
;
draw_clippable:
	; Test for right boundary.
	; The -8 embeds an assumption that clippables are 16px i.e. 8 bytes across.
	cp START_X + 128 - 7 + 1
	jp nc, @+test_right_clip

	; Test for left boundary.
	cp START_X
	jp c, @+test_left_clip

	; No clipping required. That was easy!
	; Dispatch via the jump located at the start of the clippable page.
	ld l, 0
	sub START_X
	add a
	ld e, a
	scf
	rr d
	rr e
	jp (hl)

@test_right_clip:
	; Exit early if clippable is entirely off the right-hand side of the display.
	cp START_X + 128
	ret nc

	; Convert to a jump location, calculate screen location and go.
	ld e, a
	sub START_X + (128 - 7) - 8
	rlca
	rlca
	rlca
	rlca
	ld l, a
	ld a, e

	; Copy and pasted from above. Pyz80 has no macros, I think?
	sub START_X
	add a
	ld e, a
	scf
	rr d
	rr e

	jp (hl)

@test_left_clip:
	; Exit early if clippable is entirely off the left-hand side of the display.
	cp START_X - 8 + 1
	ret c

	ld e, a
	cpl			; TODO: can I rearrange the dispatch group to avoid this cpl?
	add START_X + 1
	rlca
	rlca
	rlca
	rlca
	ld l, a
	ld a, e

	; Copy and pasted from above. Pyz80 has no macros, I think?
	sub START_X
	add a
	ld e, a
	dec d
	scf
	rr d
	rr e

	jp (hl)
