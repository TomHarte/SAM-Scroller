;
; This is purely one-time startup stuff; relocate it into one of the initial video buffers
; so that it naturally doesn't have an ongoing footprint.
;

DUMP SETUPPAGE, 0
ORG 0

column_count: EQU 17

setup_per_screen_code:
	ld (@+return+1), de

	; Establish palette.
	ld bc, 0x10f8
	ld hl, palette+15
	otdr

	; Setup all screens.
	;
	; (1) copy tile-drawing code, unmodified.
	;
	ld a, 0
@copy_buffer_code:
	out (HMPR), a

	; Copy down tile-drawing code.
	ld hl, BUFFER_CODE_ORIGINAL
	ld de, BUFFER_CODE
	ld bc, BUFFER_CODE_DONE-BUFFER_CODE
	ldir

	; Set first two start addresses.
	ld hl, 128*192 + 32768		; Start of rightmost column.

	; If a is odd byte size, start one earlier, per the different rules for even-sized
	; and odd-sized tile output functions.
	ld c, a
	srl c
	srl c
	jr nc, @+no_dec
	dec hl

@no_dec:
	; Store first address.
	ld (column_address0 + 1), hl

	; Next will be at [screen end] - (a >> 1) {- 8 for page 0}.
	ld hl, 128*192 + 32768

	or a
	jr z, @+sub8
	ld c, a
	ld b, 0
	srl c
	sbc hl, bc
	jr @+store

@sub8:
	ld bc, -8
	add hl, bc

	; Store second address
@store:
	ld bc, -8

	;
	; Proceed from the second column address, decreasing by 8 across the
	; rest of the set.
	;
@address_loop: EQU FOR column_count - 1
	ld (column_address{@address_loop+1} + 1), hl
	add hl, bc
NEXT @address_loop

	; Continue to next page.
	add 2
	cp 16
	jp nz, @-copy_buffer_code

	;
	; Apply per-page adjustments to locate proper tile pages.
	;

	; First page: just do 16 columns by adding an extra JR.
	ld a, 0
	out (HMPR), a

	ld a, 0x18
	ld (column_address16), a
	ld a, columns_end - column_address16 - 2
	ld (column_address16 + 1), a

	; Second page onwards: use appropriate left and right
	; tables for first and last column; if this is an
	; odd page (i.e. one in which the clipped tiles are
	; an odd number of bytes wide), also decrease the final
	; column start address by 1.
@page_loop: EQU FOR 7
	ld a, 2 + (@page_loop << 1)
	out (HMPR), a

IF @page_loop == 0
	@tiles_left_page: 		EQU tiles_left_1_page
	@tiles_left_address:	EQU tiles_left_1
	@tiles_right_page: 		EQU tiles_right_7_page
	@tiles_right_address:	EQU tiles_right_7
ENDIF
IF @page_loop == 1
	@tiles_left_page: 		EQU tiles_left_2_page
	@tiles_left_address:	EQU tiles_left_2
	@tiles_right_page: 		EQU tiles_right_6_page
	@tiles_right_address:	EQU tiles_right_6
ENDIF
IF @page_loop == 2
	@tiles_left_page: 		EQU tiles_left_3_page
	@tiles_left_address:	EQU tiles_left_3
	@tiles_right_page: 		EQU tiles_right_5_page
	@tiles_right_address:	EQU tiles_right_5
ENDIF
IF @page_loop == 3
	@tiles_left_page: 		EQU tiles_left_4_page
	@tiles_left_address:	EQU tiles_left_4
	@tiles_right_page: 		EQU tiles_right_4_page
	@tiles_right_address:	EQU tiles_right_4
ENDIF
IF @page_loop == 4
	@tiles_left_page: 		EQU tiles_left_5_page
	@tiles_left_address:	EQU tiles_left_5
	@tiles_right_page: 		EQU tiles_right_3_page
	@tiles_right_address:	EQU tiles_right_3
ENDIF
IF @page_loop == 5
	@tiles_left_page: 		EQU tiles_left_6_page
	@tiles_left_address:	EQU tiles_left_6
	@tiles_right_page: 		EQU tiles_right_2_page
	@tiles_right_address:	EQU tiles_right_2
ENDIF
IF @page_loop == 6
	@tiles_left_page: 		EQU tiles_left_7_page
	@tiles_left_address:	EQU tiles_left_7
	@tiles_right_page: 		EQU tiles_right_1_page
	@tiles_right_address:	EQU tiles_right_1
ENDIF

	ld a, @tiles_left_page
	ld (tile_page0+1), a
	ld a, @tiles_left_address >> 8
	ld (tile_address0_0+1), a
	ld (tile_address0_1+1), a
	ld (tile_address0_2+1), a

	ld a, @tiles_right_page
	ld (tile_page16+1), a
	ld a, @tiles_right_address >> 8
	ld (tile_address16_0+1), a
	ld (tile_address16_1+1), a
	ld (tile_address16_2+1), a

IF @page_loop & 1 == 0
	ld a, (column_address16+1)
	dec a
	ld (column_address16+1), a
ENDIF
NEXT @page_loop

	ld a, EXECPAGE
	out (HMPR), a
@return:
	jp 1234


INC "generated/palette.z80s"

;
; The section from here to BUFFER_CODE_DONE is copied into place on
; each video page individually, fixed up slightly for the appropriate
; tile functions.
;
BUFFER_CODE_ORIGINAL:
include "per_buffer_code.z80s"
BUFFER_CODE_DONE:
;
; End relocated section.
;
