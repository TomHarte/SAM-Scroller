LINE:		EQU 249
STATUS:		EQU 249

LMPR:		EQU 250
HMPR:		EQU 251
VMPR:		EQU 252
BORDER:		EQU 254

EXECPAGE:	EQU 24
SETUPPAGE:	EQU 14

INC "per_buffer_layout.z80s"

	ORG 0
	DUMP EXECPAGE, 0
	AUTOEXEC

	; This program does not use interrupts.
	di

	; Disable display until setup is complete.
	ld a, %10000000
	out (BORDER), a

	; Establish line interrupts at line 191, which will be polled for later.
	ld a, 191
	out (LINE), a

	;
	; The SAM being what it is, execution will actually begin with this code in
	; the upper page.
	;
	; But that's convenient for taking advantage of the setup code — put that
	; initially into the lower page and give it a modified return address.
	;
	ld a, %00100000 + SETUPPAGE
	out (LMPR), a
	ld de, @+fix_page + 0x8000
	jp setup_per_screen_code

@fix_page:
	; Page self to lower page and proceed with execution from there.
	ld a, %00100000 + EXECPAGE
	out (LMPR), a

@redraw_all:
	; Do a full redraw at the current scroll position.
	ld de, @+enter_loop
	jp @+reset_scrolling

@enter_loop:
	; Reenable the display.
	ld a, %00000000
	out (BORDER), a

;
; Initial setup tasks are done now.
;

@draw_scene:

	;
	; Wait for start of lower border.
	;
@wait:
	in a, (STATUS)
	rra
	jr c, @-wait
	;
	; Display is now beginning the first line of lower border.
	;

	; Switch to displaying whatever is the correct screen.
	ld a, (@+next_vmpr)
	out (VMPR), a

	; Record no scroll as having occurred.
	xor a
	ld (@+scroll_change), a

	; Check and apply keyboard input — cursor left/right only at present.
	ld bc, 0xfffe
	in a, (c)
	rra
	rra
	rra
	rra	; left is now in carry
	jr c, @+test_right

	ld de, @+redraw
	jp @+scroll_left

@test_right:
	rra	; right is now in carry
	jr c, @+redraw

	ld de, @+redraw
	jp @+scroll_right

@redraw:
	; Put next target buffer into the upper page.
	ld a, (@+scroll_offset)
	out (HMPR), a

	; Don't OR anything into the dirty map if there was no scroll.
	ld a, (@+scroll_change)
	or a
	jr z, @+begin_map

	;
	; OR per-page dirty bits with the fixed list to produce a composite diff.
	;
	ld de, DIRTY_FLAGS + FLAGS_SIZE
	ld hl, (@+diff_address)

	; The above assumes a scroll to the right; adjust for a scroll to the left.
	rra
	jr nc, @+or_flags

	ld bc, 3
	add hl, bc

@or_flags:
	ld c, FLAGS_SIZE
@flag_loop:
	dec de
	dec hl

	ld a, (de)
	or (hl)
	ld (de), a

	dec c
	jr nz, @-flag_loop

@begin_map:
	; Grab map address and set diffs list pointer.
	ld ix, (@+map_address)
	ld iy, DIRTY_FLAGS + FLAGS_SIZE

	;
	; Segue into tile drawing.
	;
	ld de, @+tiles_drawn
	jp draw_tiles
@tiles_drawn:

	;
	; Add test sprite.
	;
	ld de, @+sprite_drawn
	jp test_sprite
@sprite_drawn:

	;
	; Set the page just drawn to as next to display
	;
	ld a, (@+scroll_offset)
	add a, %01100000
	ld (@+next_vmpr), a

;
; Loop for end of frame
;
	jr @-draw_scene


;
; Scrolls the display one position to the left.
;
@scroll_left:
	ld (@+return+1), de

	;
	; Check that total offset is greater than 0; if so then subtract 1
	; and continue. Otherwise return early.
	;
	ld hl, (@+total_x)
	ld a, h
	or l
	jr z, @+return
	dec hl
	ld (@+total_x), hl

	; Record that a scroll left happened.
	ld a, 1
	ld (@+scroll_change), a

	;
	; Subtract two from scroll offset.
	;
	ld a, (@+scroll_offset)
	ld d, a
	dec a
	dec a
	and 15
	ld (@+scroll_offset), a

	;
	; Update map pointer if the scroll offset just decremented to 0.
	;
	jp nz, @+return

	ld hl, (@+map_address)
	ld bc, -12
	add hl, bc
	ld (@+map_address), hl

	ld hl, (@+diff_address)
	ld bc, -3
	add hl, bc
	ld (@+diff_address), hl

@return:
	jp 1234

;
; Scrolls the display one position to the right.
;
@scroll_right:
	ld (@+return+1), de

	;
	; Check that total offset is less than the map size; if so then add 1
	; and continue. Otherwise return early.
	;
	ld hl, (@+total_x)
	ld bc, (((diffs - map) / 12) - column_count) * 8
	scf
	ccf
	sbc hl, bc
	jr z, @+return
	add hl, bc
	inc hl
	ld (@+total_x), hl

	; Record that a scroll right happened.
	ld a, 2
	ld (@+scroll_change), a

	;
	; Add two to scroll offset.
	;
	ld a, (@+scroll_offset)
	ld d, a
	inc a
	inc a
	and 15
	ld (@+scroll_offset), a

	;
	; Do not update map pointer if the scroll offset didn't just increment from 0.
	;
	; Logic here is that offset 1 is the map at offset 0 but moved one position to
	; the left. Therefore the step up from 0 is the point at which the far extent
	; of the map changes.
	;
	ld a, d
	or a
	jp nz, @+return

	; Add 12 to map address to move one column along.
	; Correspondingly add 3 to the diff address.
	ld hl, (@+map_address)
	ld bc, 12
	add hl, bc
	ld (@+map_address), hl

	ld hl, (@+diff_address)
	ld bc, 3
	add hl, bc
	ld (@+diff_address), hl

@return:
	jp 1234

;
; Performs a full redraw of all video buffers.
;
@reset_scrolling:
	ld (@+return+1), de

	; Seed all buffers.
	ld a, 16
	ld (@+scroll_offset), a
@seed_tiles:
	ld a, (@+scroll_offset)
	or a
	jr z, @+end_seed
	dec a
	dec a
	ld (@+scroll_offset), a
	out (HMPR), a

	ld a, 0x1e
	ld hl, DIRTY_FLAGS
	ld b, FLAGS_SIZE
@flags_loop:
	ld (hl), a
	inc l
	dec b
	jr nz, @-flags_loop

	ld ix, (@+map_address)
	ld iy, DIRTY_FLAGS + FLAGS_SIZE
	ld de, @-seed_tiles
	jp draw_tiles

@end_seed:
	ld a, 0
	ld (@+scroll_offset), a

@return:
	jp 1234

;
; Experimental: draws a single, rectangular sprite.
;
test_sprite:
	ld (@+return+1), de

	; Load y, multiply it by 128 and set the top bit.
	ld hl, (@+sprite_y - 1)
	srl h
	set 7, h
	rr l

	; Add x.
	ld bc, (@+sprite_x)
	add hl, bc

	; Transfer, painfully, to IX.
	ex de, hl
	ld ixl, e
	ld ixh, d

	; Plot two pixels.
	ld (ix + 0), 0x11

	;
	; Mark proper dirty bit.
	;

	; Find proper bit(s) to set.
	ld a, (@+sprite_y)
	and 0xf0
	rra
	rra
	rra
	rra		; Now a = tile to set.

	; Triple that to get a byte offset and add the start of
	; dirty_masks.
	ld b, a
	add a
	add b
	ld c, a
	ld b, 0
	ld hl, dirty_masks
	add hl, bc

	; Load three-byte mask.
	ld a, (hl)
	inc hl
	ld b, (hl)
	inc hl
	ld c, (hl)
	inc hl

	; TEMPORARY: assume only a single bit to set.
	; So no need to calculate a new (hl), just XOR
	; in the very next three bytes.
	;
	; Otherwise would need to add more to hl.
	xor (hl)
	inc hl
	ld d, a

	ld a, b
	xor (hl)
	ld b, a
	inc hl

	ld a, c
	xor (hl)
	ld c, a

	;
	; Now D:BC = mask to set per column.
	;

	; Calculate first dirty column, multiplied by three.
	ld a, (@+scroll_offset)
	or a
	jr nz, @+not_zero
	add a, 16
@not_zero:
	rra

	ld e, a
	ld a, (@+sprite_x)
	add e

	and 0xf8
	rra
	rra
	ld e, a
	rra
	add e

	; Relocate into dirty flags.
	ld l, a
	ld h, DIRTY_FLAGS >> 8

	; OR in the collected mask.
	ld a, (hl)
	or d
	ld (hl), a
	inc hl

	ld a, (hl)
	or b
	ld (hl), a
	inc hl

	ld a, (hl)
	or c
	ld (hl), a



	;
	; Move vertically.
	;
	ld a, (@+sprite_y)
	dec a
	jr nz, @+moved
	ld a, 191
@moved:
	ld (@+sprite_y), a


@return:
	jp 1234

;
; A table in which the three bytes on line n represent all tiles
; set as dirty from row n downwards.
;
dirty_masks:
	db 0x1e, 0x1e, 0x1e
	db 0x0e, 0x1e, 0x1e
	db 0x06, 0x1e, 0x1e
	db 0x02, 0x1e, 0x1e

	db 0x00, 0x1e, 0x1e
	db 0x00, 0x0e, 0x1e
	db 0x00, 0x06, 0x1e
	db 0x00, 0x02, 0x1e

	db 0x00, 0x00, 0x1e
	db 0x00, 0x00, 0x0e
	db 0x00, 0x00, 0x06
	db 0x00, 0x00, 0x02

	db 0x00, 0x00, 0x00

@scroll_offset:	db 0
@map_address: dw map + 12*(column_count)
@diff_address: dw diffs + 3*(column_count - 1)
@next_vmpr: db 0
@scroll_change: db 0
@total_x: dw 0

db 0
@sprite_y: db 88
@sprite_x: db 65
db 0


INC "buffer_setup.z80s"
INC "generated/tiles.z80s"
