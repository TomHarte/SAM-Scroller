LINE:		EQU 249
STATUS:		EQU 249

LMPR:		EQU 250
HMPR:		EQU 251
VMPR:		EQU 252
BORDER:		EQU 254

EXECPAGE:	EQU 24

INC "per_buffer_layout.z80s"

	ORG 0
	DUMP EXECPAGE, 0
INC "generated/palette.z80s"
	AUTOEXEC

	di

	; Establish line interrupts at line 191, which will be polled for later.
	ld a, 191
	out (LINE), a

	; Page self to lower page and proceed with execution from there.
	ld a, %00100000 + EXECPAGE
	out (LMPR), a
	jp @+relocate

@relocate:
	; Disable display until the following is complete.
	ld a, %10000000
	out (BORDER), a

	; Establish palette.
	ld bc, 0x10f8
	ld hl, palette+15
	otdr

	; Setup all screens.
	ld e, 16
	exx
@setup_screen:
	exx
	ld a, e
	dec a
	dec a
	out (HMPR), a
	ld e, a
	exx
	jp m, @+break_setup_screen

	ld sp, 0 - 8*1024
	ld bc, 24*1024 / 4
	ld hl, 0
@blank_loop:
	push hl
	push hl
	dec bc
	ld a, b
	or c
	jr nz, @-blank_loop

	ld a, 0x1e
	ld hl, DIRTY_FLAGS
	ld b, FLAGS_SIZE
@flags_loop:
	ld (hl), a
	inc l
	dec b
	jr nz, @-flags_loop

	; Copy down tile-drawing code.
	exx
	ld a, e
	ld hl, BUFFER_CODE_ORIGINAL
	ld de, BUFFER_CODE
	ld bc, BUFFER_CODE_DONE-BUFFER_CODE
	ldir
	ld e, a
	exx

	; Set start addresses.
	ld hl, 128*192 + 32768		; Start of first column

	srl a						; Subtract a distance for the target page.
	ld c, a
	ld b, 0
	sbc hl, bc					; C is clear from the SRL above.
	ex de, hl					; Move buffer address to DE.

	ld ix, columns_start
	ld a, column_count
@address_loop:
	ld (ix + buffer_start_offset), e
	ld (ix + buffer_start_offset + 1), d
	ld bc, column_length
	add ix, bc						; Update IX to point to the next buffer address.

	ex de, hl
	ld bc, -8
	add hl, bc
	ex de, hl						; Subtract 8 from the buffer address.

	dec a
	jr nz, @-address_loop			; Loop until done.

	jp @-setup_screen

@break_setup_screen:

	; Reenable the display.
	ld a, %00000000
	out (BORDER), a

;
; Initial setup tasks are done now.
;

	; Set current far extent of map, scroll 0.
	ld a, 0
	ld (@+scroll_offset), a

@draw_scene:

	;
	; Wait for start of lower border.
	;
@wait:
	in a, (STATUS)
	rra
	jr c, @-wait
	;
	; Display is now beginning the first line of lower border.
	;


	; Put next page into the upper page.
	ld a, (@+scroll_offset)
	out (HMPR), a


	;
	; OR per-page dirty bits with the fixed list to produce a composite diff.
	;
	ld c, FLAGS_SIZE
	ld de, DIRTY_FLAGS + FLAGS_SIZE
	ld iy, COMBINED_FLAGS + FLAGS_SIZE
	ld hl, (@+diff_address)
@flag_loop:
	dec de
	dec iy
	dec hl

	ld a, (de)
	or (hl)
	ld (iy+0), a

	ld a, 0
	ld (de), a

	dec c
	jr nz, @-flag_loop


	; Seed pointers to map contents and to diffs list.
	ld ix, (@+map_address)
	ld iy, COMBINED_FLAGS + FLAGS_SIZE

	;
	; Segue into tile drawing.
	;
	ld de, @+tiles_drawn
	jp draw_tiles
@tiles_drawn:



	;
	; Display page just drawn to.
	;
	ld a, (@+scroll_offset)
	add a, %01100000
	out (VMPR), a

	;
	; Scroll over and repeat.
	;
	ld a, (@+scroll_offset)
	inc a
	inc a
	and 15
	ld (@+scroll_offset), a
	jp nz, @-draw_scene

	; Add 12 to map address to move one column along.
	; Correspondingly add 3 to the diff address.
	ld hl, (@+map_address)
	ld bc, 12
	add hl, bc
	ld (@+map_address), hl

	ld hl, (@+diff_address)
	ld bc, 3
	add hl, bc
	ld (@+diff_address), hl

;
; Loop for end of frame
;
	jr @-draw_scene


@scroll_offset:	db 0
@map_address: dw map + 12*32
@diff_address: dw diffs + 3*31

;
; The section from here to BUFFER_CODE_DONE is copied into place on
; each video page individually, fixed up slightly for the appropriate
; tile functions.
;
BUFFER_CODE_ORIGINAL:
include "per_buffer_code.z80s"
BUFFER_CODE_DONE:

;
; End relocated section.
;

INC "generated/tiles.z80s"
